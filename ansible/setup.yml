- hosts: photobooth
  tasks:
    - name: add local user
      user:
        name: "{{photobooth_user.name}}"
        home: "{{photobooth_user.homedir}}"
        shell: /bin/bash
      register: local_user

    - name: deploy autologin unit
      copy:
        src: /lib/systemd/system/getty@.service
        dest: /etc/systemd/system/autologin@.service
        remote_src: yes
    
    - name: update autologin unit
      lineinfile:
        dest: /etc/systemd/system/autologin@.service
        line: ExecStart=-/sbin/agetty -a "{{photobooth_user.name}}" %I $TERM
        regexp: ^ExecStart=-/sbin/agetty
    
    - name: Disable tty1 unit
      systemd:
        daemon_reload: yes
        enabled: no
        name: getty@tty1.service
    
    - name: enable autologin unit
      systemd:
        daemon_reload: yes
        enabled: yes
        state: restarted
        name: autologin@tty1.service
    
    - name: copy bash_profile
      copy:
        src: files/photobooth/bash_profile
        dest: "{{photobooth_user.homedir}}/.bash_profile"
        owner: "{{photobooth_user.name}}"
        mode : 0644

    - name: install packages
      apt:
        name: "{{item}}"
        state: latest
        update_cache: yes
      with_items:
        - imagemagick
        - python-dev
        - build-essential
        - python-pkgconfig
        - python-setuptools
        - virtualenv
        - libgphoto2-6
        - libgphoto2-dev
        - rsync
    
    - name: install pip packages
      pip:
        name: "{{item}}"
        virtualenv: "{{photobooth_virtualenv}}"
      with_items:
        - RPi.GPIO
        - gphoto2

    - name: create USB stick mountpoint
      file:
        path: "{{photobooth_usb_mountpoint}}"
        state: directory
        owner: "{{photobooth_user.name}}"
        mode : 0755

    - name: update fstab for USB stick
      mount:
        path: "{{photobooth_usb_mountpoint}}"
        src: LABEL=PHOTOBOOTH
        fstype: auto
        passno: 2
        opts: defaults,noatime,auto,nofail,uid={{local_user.uid}},gid={{local_user.group}}
        state: present

    - name: install photobooth app
      copy:
        src: files/photobooth/app
        dest: "{{photobooth_user.homedir}}"
        owner: "{{photobooth_user.name}}"

    - name: deploy photobooth systemd unit
      template:
        src: templates/photobooth/photobooth.service.j2
        dest: /etc/systemd/system/photobooth.service

    - name: create usb mountpoint systemd unit directory
      file:
        path: /etc/systemd/system/{{photobooth_usb_mountpoint|regex_replace('^/|/$','')|regex_replace('/','-')}}.mount.d
        state: directory

    - name: set photobooth units wanted by usb mountpoint
      copy:
        src: files/photobooth/{{item}}
        dest: /etc/systemd/system/{{photobooth_usb_mountpoint|regex_replace('^/|/$','')|regex_replace('/','-')}}.mount.d/{{item}}
      items:
        - 10-run-photobooth.conf

    - name: enable photobooth service
      systemd:
        daemon_reload: yes
        name: photobooth.service
        enabled: yes


- hosts: projector
  tasks:
    - name: install packages
      apt:
        name: "{{item}}"
        state: latest
        update_cache: yes
      with_items:
        - xorg
        - libcurl4-openssl-dev
        - libx11-dev
        - libxt-dev
        - libimlib2-dev
        - libxinerama-dev
        - libjpeg-progs
        - build-essential
        - knockd
        - rsync

    - name: add local user
      user:
        name: "{{projector_user.name}}"
        home: "{{projector_user.homedir}}"
        generate_ssh_key: yes
        shell: /bin/bash
      register: local_user

    - name: deploy local user public key on photobooth server
      authorized_key:
        key: "{{local_user.ssh_public_key}}"
        user: "{{photobooth_user.name}}"
        comment : "Projector SSH key"
      delegate_to: photobooth

    - name: deploy autologin unit
      copy:
        src: /lib/systemd/system/getty@.service
        dest: /etc/systemd/system/autologin@.service
        remote_src: yes
    
    - name: update autologin unit
      lineinfile:
        dest: /etc/systemd/system/autologin@.service
        line: ExecStart=-/sbin/agetty -a {{projector_user.name}} %I $TERM
        regexp: ^ExecStart=-/sbin/agetty
    
    - name: disable tty1 unit
      systemd:
        daemon_reload: yes
        enabled: no
        name: getty@tty1.service
    
    - name: enable autologin unit
      systemd:
        daemon_reload: yes
        enabled: yes
        state: restarted
        name: autologin@tty1.service
    
    - name: copy bash_profile
      copy:
        src: files/{{inventory_hostname}}/bash_profile
        dest: "{{projector_user.homedir}}/.bash_profile"
        owner: "{{projector_user.name}}"
        mode : 0644

    - name: FEH || create feh unarchive directory
      file:
        path: /tmp/{{feh_version}}
        state: directory

    - name: FEH || download feh
      unarchive:
        src: "{{feh_source}}"
        dest: /tmp/{{feh_version}}
        remote_src: yes
        extra_opts:
          - "--strip-components=1"
        creates: /tmp/{{feh_version}}/Makefile

    - name: FEH || install feh
      shell: make && make install
      args:
        chdir: /tmp/{{feh_version}}
        creates: /usr/local/bin/feh

    - name: FEH || create slideshow directory
      file:
        path: "{{feh_config.path}}"
        state: directory
        mode: 0755
        owner: "{{projector_user.name}}"

    - name: FEH || copy default slideshow image
      copy:
        src: files/projector/default.jpg
        dest: "{{feh_config.path}}"
        owner: "{{projector_user.name}}"

    - name: FEH || deploy xinitrc
      template:
        src: templates/projector/xinitrc.j2
        dest: "{{projector_user.homedir}}/.xinitrc"
        owner: "{{projector_user.name}}"
        mode: 0644

    - name: KNOCKD || edit knockd default configuration
      lineinfile:
        path: /etc/default/knockd
        regexp: "{{item.re}}"
        line: "{{item.line}}"
      with_items:
        - re: ^START_KNOCKD=
          line: START_KNOCKD=1
        - re: ^KNOCKD_OPTS="-i
          line: KNOCKD_OPTS="-i wlan0"

    - name: KNOCKD || deploy knockd configuration file
      template:
        src: templates/projector/knockd.conf.j2
        dest: /etc/knockd.conf

    - name: KNOCKD || create knockd systemd unit
      copy:
        src: files/projector/knockd.service
        dest: /etc/systemd/system/knockd.service

    - name: KNOCKD || Enable knockd at boot
      systemd:
        name: knockd.service
        enabled: yes
        daemon_reload: yes

    - name: create root .ssh directory
      file:
        path: /root/.ssh
        state: directory
        
    - name: deploy root ssh_config
      template:
        src: templates/projector/ssh_config.j2
        dest: /root/.ssh/config
        mode: 0600


- hosts: all
  tasks:
    - name: set hostname
      hostname:
        name: "{{inventory_hostname}}"
    
    - name: update /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "{{item}}"
      with_items:
        - 10.200.0.1 projector
        - 10.200.0.2 photobooth
    
    - name: is raspberry
      stat:
        path: /boot/cmdline.txt
      register: israspeberry

    - name: disable dhcpd for wlan0 interface
      lineinfile:
        dest: /etc/dhcpcd.conf
        line: denyinterfaces wlan0
      when: israspeberry.stat.exists
    
    - name: configure keyboard
      command: raspi-config nonint do_configure_keyboard fr
      when: israspeberry.stat.exists

    - name: finalize raspberry installation as '{{inventory_hostname}}'
      include_tasks: raspberry-{{inventory_hostname}}-setup.yml
      when: israspeberry.stat.exists
